{"ast":null,"code":"import { map } from 'rxjs/operators';\nimport { BaseService } from '../base-service';\nimport { searchFlightFlight } from '../fn/flight/search-flight-flight';\nimport { searchFlightFlight$Plain } from '../fn/flight/search-flight-flight-plain';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../api-configuration\";\nimport * as i2 from \"@angular/common/http\";\nexport class FlightService extends BaseService {\n  constructor(config, http) {\n    super(config, http);\n  }\n  /** Path part for operation `searchFlightFlight()` */\n\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `searchFlightFlight$Plain()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\n  searchFlightFlight$Plain$Response(params, context) {\n    return searchFlightFlight$Plain(this.http, this.rootUrl, params, context);\n  }\n  /**\r\n   * This method provides access only to the response body.\r\n   * To access the full response (for headers, for example), `searchFlightFlight$Plain$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\n  searchFlightFlight$Plain(params, context) {\n    return this.searchFlightFlight$Plain$Response(params, context).pipe(map(r => r.body));\n  }\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `searchFlightFlight()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\n  searchFlightFlight$Response(params, context) {\n    return searchFlightFlight(this.http, this.rootUrl, params, context);\n  }\n  /**\r\n   * This method provides access only to the response body.\r\n   * To access the full response (for headers, for example), `searchFlightFlight$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\n  searchFlightFlight(params, context) {\n    return this.searchFlightFlight$Response(params, context).pipe(map(r => r.body));\n  }\n}\nFlightService.SearchFlightFlightPath = '/Flight';\nFlightService.ɵfac = function FlightService_Factory(t) {\n  return new (t || FlightService)(i0.ɵɵinject(i1.ApiConfiguration), i0.ɵɵinject(i2.HttpClient));\n};\nFlightService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: FlightService,\n  factory: FlightService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAKA,SAASA,GAAG,QAAQ,gBAAgB;AAEpC,SAASC,WAAW,QAAQ,iBAAiB;AAK7C,SAASC,kBAAkB,QAAQ,mCAAmC;AAEtE,SAASC,wBAAwB,QAAQ,yCAAyC;;;;AAIlF,OAAM,MAAOC,aAAc,SAAQH,WAAW;EAC5CI,YAAYC,MAAwB,EAAEC,IAAgB;IACpD,KAAK,CAACD,MAAM,EAAEC,IAAI,CAAC;EACrB;EAEA;;EAGA;;;;;;EAMAC,iCAAiC,CAACC,MAAwC,EAAEC,OAAqB;IAC/F,OAAOP,wBAAwB,CAAC,IAAI,CAACI,IAAI,EAAE,IAAI,CAACI,OAAO,EAAEF,MAAM,EAAEC,OAAO,CAAC;EAC3E;EAEA;;;;;;EAMAP,wBAAwB,CAACM,MAAwC,EAAEC,OAAqB;IACtF,OAAO,IAAI,CAACF,iCAAiC,CAACC,MAAM,EAAEC,OAAO,CAAC,CAACE,IAAI,CACjEZ,GAAG,CAAEa,CAAsC,IAAsBA,CAAC,CAACC,IAAI,CAAC,CACzE;EACH;EAEA;;;;;;EAMAC,2BAA2B,CAACN,MAAkC,EAAEC,OAAqB;IACnF,OAAOR,kBAAkB,CAAC,IAAI,CAACK,IAAI,EAAE,IAAI,CAACI,OAAO,EAAEF,MAAM,EAAEC,OAAO,CAAC;EACrE;EAEA;;;;;;EAMAR,kBAAkB,CAACO,MAAkC,EAAEC,OAAqB;IAC1E,OAAO,IAAI,CAACK,2BAA2B,CAACN,MAAM,EAAEC,OAAO,CAAC,CAACE,IAAI,CAC3DZ,GAAG,CAAEa,CAAsC,IAAsBA,CAAC,CAACC,IAAI,CAAC,CACzE;EACH;;AAlDWV,aAAc,CAMTY,sBAAsB,GAAG,SAAS;AANvCZ,aAAc;mBAAdA,aAAa;AAAA;AAAbA,aAAc;SAAdA,aAAa;EAAAa,SAAbb,aAAa;EAAAc,YADA;AAAM","names":["map","BaseService","searchFlightFlight","searchFlightFlight$Plain","FlightService","constructor","config","http","searchFlightFlight$Plain$Response","params","context","rootUrl","pipe","r","body","searchFlightFlight$Response","SearchFlightFlightPath","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\CharlesGraham\\Desktop\\Builds\\dotnet_builds\\Flights\\Flights\\ClientApp\\src\\app\\api\\services\\flight.service.ts"],"sourcesContent":["/* tslint:disable */\r\n/* eslint-disable */\r\nimport { HttpClient, HttpContext } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\n\r\nimport { BaseService } from '../base-service';\r\nimport { ApiConfiguration } from '../api-configuration';\r\nimport { StrictHttpResponse } from '../strict-http-response';\r\n\r\nimport { FlightRm } from '../models/flight-rm';\r\nimport { searchFlightFlight } from '../fn/flight/search-flight-flight';\r\nimport { SearchFlightFlight$Params } from '../fn/flight/search-flight-flight';\r\nimport { searchFlightFlight$Plain } from '../fn/flight/search-flight-flight-plain';\r\nimport { SearchFlightFlight$Plain$Params } from '../fn/flight/search-flight-flight-plain';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class FlightService extends BaseService {\r\n  constructor(config: ApiConfiguration, http: HttpClient) {\r\n    super(config, http);\r\n  }\r\n\r\n  /** Path part for operation `searchFlightFlight()` */\r\n  static readonly SearchFlightFlightPath = '/Flight';\r\n\r\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `searchFlightFlight$Plain()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  searchFlightFlight$Plain$Response(params?: SearchFlightFlight$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<FlightRm>>> {\r\n    return searchFlightFlight$Plain(this.http, this.rootUrl, params, context);\r\n  }\r\n\r\n  /**\r\n   * This method provides access only to the response body.\r\n   * To access the full response (for headers, for example), `searchFlightFlight$Plain$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  searchFlightFlight$Plain(params?: SearchFlightFlight$Plain$Params, context?: HttpContext): Observable<Array<FlightRm>> {\r\n    return this.searchFlightFlight$Plain$Response(params, context).pipe(\r\n      map((r: StrictHttpResponse<Array<FlightRm>>): Array<FlightRm> => r.body)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `searchFlightFlight()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  searchFlightFlight$Response(params?: SearchFlightFlight$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<FlightRm>>> {\r\n    return searchFlightFlight(this.http, this.rootUrl, params, context);\r\n  }\r\n\r\n  /**\r\n   * This method provides access only to the response body.\r\n   * To access the full response (for headers, for example), `searchFlightFlight$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  searchFlightFlight(params?: SearchFlightFlight$Params, context?: HttpContext): Observable<Array<FlightRm>> {\r\n    return this.searchFlightFlight$Response(params, context).pipe(\r\n      map((r: StrictHttpResponse<Array<FlightRm>>): Array<FlightRm> => r.body)\r\n    );\r\n  }\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}